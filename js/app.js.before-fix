console.log("Dab Timer - Clean Version");

// App Configuration
const CONFIG = {
    materials: {
        quartz: { heatUp: 30, coolDown: 45 },
        titanium: { heatUp: 20, coolDown: 60 },
        ceramic: { heatUp: 45, coolDown: 50 }
    },
    concentrates: {
        shatter: { idealTemp: '315-400°F' },
        wax: { idealTemp: '350-450°F' },
        resin: { idealTemp: '400-500°F' },
        rosin: { idealTemp: '380-450°F' },
        budder: { idealTemp: '350-420°F' },
        diamonds: { idealTemp: '400-500°F' },
        sauce: { idealTemp: '380-450°F' },
        crumble: { idealTemp: '360-430°F' }
    },
    heaters: {
        torch: { modifier: 1.0 },
        lighter: { modifier: 2.0 }
    }
};

// App State
let state = {
    currentTab: 'home-screen',
    settings: {
    timer: {
        isRunning: false,
        mode: 'heat',
        timeLeft: 0,
        totalTime: 0,
        heatTime: 0,
        coolTime: 0
    },
        material: 'quartz',
        concentrate: 'shatter',
        heater: 'torch'
    }
};

// Initialize the app
function initializeApp() {
    console.log("Initializing app...");
    updateClock();
    setupTabNavigation();
    setupOptionButtons();
    updateSettingsDisplay(); // Initialize formula display
    console.log("App initialized");
}

// Clock functions
function updateClock() {
    const clockElement = document.getElementById('current-time');
    if (clockElement) {
        const now = new Date();
        clockElement.textContent = now.toLocaleTimeString([], { 
            hour: '2-digit', 
            minute: '2-digit' 
        });
    }
}

function startClock() {
    updateClock();
    setInterval(updateClock, 30000);
}

// Tab navigation
function setupTabNavigation() {
    const tabBtns = document.querySelectorAll('.tab-btn');
    tabBtns.forEach(btn => {
        btn.addEventListener('click', function() {
            switchToTab(this.dataset.tab);
        });
    });
}

function switchToTab(tabId) {
    const tabBtns = document.querySelectorAll('.tab-btn');
    const tabContents = document.querySelectorAll('.tab-content');
    
    tabBtns.forEach(btn => {
        btn.classList.remove('active');
        if (btn.dataset.tab === tabId) btn.classList.add('active');
    });
    
    tabContents.forEach(content => {
        content.classList.remove('active');
        if (content.id === tabId) content.classList.add('active');
    });
    
    state.currentTab = tabId;
}

// Option buttons


// Initialize when DOM is ready
document.addEventListener('DOMContentLoaded', initializeApp);

// Fix option selection to update displayed values
function setupOptionButtons() {
    const options = document.querySelectorAll('.option-btn');
    options.forEach(btn => {
        btn.addEventListener('click', function() {
            const settingType = this.dataset.setting;
            const value = this.dataset.value;
            
            if (settingType && value) {
                // Remove active class from siblings
                const parent = this.parentElement;
                const siblings = parent.querySelectorAll('.option-btn');
                siblings.forEach(sib => sib.classList.remove('active'));
                
                // Add active class to clicked button
                this.classList.add('active');
                
                // Update state
                state.settings[settingType] = value;
                
                // Update displayed values
                updateSettingsDisplay();
                
                console.log("Setting changed:", settingType, "=", value);
            }
        });
    });
}

function updateSettingsDisplay() {
    // Update current settings display
    const materialEl = document.getElementById('current-material');
    const concentrateEl = document.getElementById('current-concentrate');
    const heaterEl = document.getElementById('current-heater');
    
    if (materialEl) materialEl.textContent = state.settings.material.charAt(0).toUpperCase() + state.settings.material.slice(1);
    if (concentrateEl) concentrateEl.textContent = state.settings.concentrate.charAt(0).toUpperCase() + state.settings.concentrate.slice(1);
    if (heaterEl) heaterEl.textContent = state.settings.heater.charAt(0).toUpperCase() + state.settings.heater.slice(1);
}

// Scientific calculations for dab timing
function calculateHeatTime(material, heater, concentrate) {
    const baseTimes = {
        quartz: { 
            shatter: 30, wax: 35, resin: 40, rosin: 38, 
            budder: 36, diamonds: 42, sauce: 39, crumble: 37
        },
        titanium: { 
            shatter: 20, wax: 25, resin: 30, rosin: 28,
            budder: 26, diamonds: 32, sauce: 29, crumble: 27
        },
        ceramic: { 
            shatter: 45, wax: 50, resin: 55, rosin: 53,
            budder: 51, diamonds: 57, sauce: 54, crumble: 52
        }
    };
    
    const heaterModifiers = {
        torch: 1.0,
        lighter: 2.0,
        enail: 0.8,
        ebanger: 0.9
    };
    
    const baseTime = baseTimes[material]?.[concentrate] || 30;
    const modifier = heaterModifiers[heater] || 1.0;
    
    return Math.round(baseTime * modifier);
}

function calculateCoolTime(material, heatTime) {
    const coolMultipliers = {
        quartz: 1.5,
        titanium: 3.0,
        ceramic: 1.2
    };
    
    const multiplier = coolMultipliers[material] || 1.5;
    return Math.round(heatTime * multiplier);
}

function updateFormulaDisplay() {
    const material = state.settings.material;
    const heater = state.settings.heater;
    const concentrate = state.settings.concentrate;
    
    const heatTime = calculateHeatTime(material, heater, concentrate);
    const coolTime = calculateCoolTime(material, heatTime);
    const totalTime = heatTime + coolTime;
    
    // Update formula display
    document.getElementById('formula-material').textContent = material.charAt(0).toUpperCase() + material.slice(1);
    document.getElementById('formula-concentrate').textContent = concentrate.charAt(0).toUpperCase() + concentrate.slice(1);
    document.getElementById('formula-heater').textContent = heater.charAt(0).toUpperCase() + heater.slice(1);
    document.getElementById('formula-heat-time').textContent = `${heatTime}s`;
    document.getElementById('formula-cool-time').textContent = `${coolTime}s`;
    document.getElementById('formula-total-time').textContent = `${totalTime}s`;
}

// Update formula when settings change
function updateSettingsDisplay() {
    // Update current settings display
    const materialEl = document.getElementById('current-material');
    const concentrateEl = document.getElementById('current-concentrate');
    const heaterEl = document.getElementById('current-heater');
    
    if (materialEl) materialEl.textContent = state.settings.material.charAt(0).toUpperCase() + state.settings.material.slice(1);
    if (concentrateEl) concentrateEl.textContent = state.settings.concentrate.charAt(0).toUpperCase() + state.settings.concentrate.slice(1);
    if (heaterEl) heaterEl.textContent = state.settings.heater.charAt(0).toUpperCase() + state.settings.heater.slice(1);
    
    // Update formula display
    updateFormulaDisplay();
}

// --- PATCH: Flash progress bar when timer completes ---
const originalCompleteTimer = completeTimer;
completeTimer = function() {
    originalCompleteTimer();

    // Flash the progress bar 3 times
    let flashes = 0;
    const flashInterval = setInterval(() => {
        elements.timerProgress.style.backgroundColor =
            elements.timerProgress.style.backgroundColor === 'red' ? '' : 'red';
        flashes++;
        if (flashes >= 6) {
            clearInterval(flashInterval);
            elements.timerProgress.style.backgroundColor = ''; // reset
        }
    }, 300);
};
// --- END PATCH ---

// Timer functionality



// Add timer to state
state.timer = {
    isRunning: false,
    mode: 'heat',
    timeLeft: 0,
    totalTime: 0,
    heatTime: 0,
    coolTime: 0
};

// Add to initializeApp
function initializeApp() {
    console.log("Initializing app...");
    updateClock();
    setupTabNavigation();
    setupOptionButtons();
    updateSettingsDisplay(); // Initialize formula display
    console.log("App initialized");
}

// Complete timer functionality
let timerInterval = null;


function initializeTimer() {
    const material = state.settings.material;
    const heater = state.settings.heater;
    const concentrate = state.settings.concentrate;
    
    const heatTime = calculateHeatTime(material, heater, concentrate);
    const coolTime = calculateCoolTime(material, heatTime);
    
    // Set timer values based on scientific calculations
    state.timer = {
        isRunning: false,
        mode: 'heat',
        timeLeft: heatTime,
        totalTime: heatTime,
        heatTime: heatTime,
        coolTime: coolTime
    };
    
    // Update timer display
    updateTimerDisplay();
    
    // Setup timer controls
    setupTimerControls();
    
    console.log("Timer initialized:", heatTime + "s heat", coolTime + "s cool");
}

function setupTimerControls() {
    const startBtn = document.getElementById('start-timer');
    const resetBtn = document.getElementById('reset-timer');
    
    if (startBtn) {
        startBtn.addEventListener('click', toggleTimer);
    }
    
    if (resetBtn) {
        resetBtn.addEventListener('click', resetTimer);
    }
}

function toggleTimer() {
    if (state.timer.isRunning) {
        pauseTimer();
    } else {
        startTimer();
    }
}

function startTimer() {
    if (state.timer.isRunning) return;
    
    state.timer.isRunning = true;
    const startBtn = document.getElementById('start-timer');
    if (startBtn) {
        startBtn.innerHTML = '<i class="fas fa-pause"></i> Pause';
    }
    
    timerInterval = setInterval(() => {
        state.timer.timeLeft--;
        updateTimerDisplay();
        
        if (state.timer.timeLeft <= 0) {
            if (state.timer.mode === 'heat') {
                switchToCoolDown();
            } else {
                completeTimer();
            }
        }
    }, 1000);
}

function pauseTimer() {
    if (!state.timer.isRunning) return;
    
    state.timer.isRunning = false;
    clearInterval(timerInterval);
    
    const startBtn = document.getElementById('start-timer');
    if (startBtn) {
        startBtn.innerHTML = '<i class="fas fa-play"></i> Resume';
    }
}

function resetTimer() {
    pauseTimer();
    initializeTimer();
}

function switchToCoolDown() {
    state.timer.mode = 'cool';
    state.timer.timeLeft = state.timer.coolTime;
    state.timer.totalTime = state.timer.coolTime;
    
    const timerMode = document.getElementById('timer-mode');
    if (timerMode) {
        timerMode.textContent = 'COOL DOWN';
    }
    
    updateTimerDisplay();
}

function completeTimer() {
    pauseTimer();
    
    const startBtn = document.getElementById('start-timer');
    if (startBtn) {
        startBtn.innerHTML = '<i class="fas fa-play"></i> Start Again';
    }
    
    // Play sound and show notification
    playAlarmSound();
    showNotification('Dab time! Your concentrate is at the perfect temperature.');
}

function updateTimerDisplay() {
    const timerElement = document.getElementById('timer');
    const timerModeElement = document.getElementById('timer-mode');
    const progressElement = document.getElementById('timer-progress');
    
    if (timerElement && state.timer) {
        const minutes = Math.floor(state.timer.timeLeft / 60);
        const seconds = state.timer.timeLeft % 60;
        timerElement.textContent = `${minutes}:${seconds.toString().padStart(2, '0')}`;
    }
    
    if (timerModeElement && state.timer) {
        timerModeElement.textContent = state.timer.mode.toUpperCase();
    }
    
    if (progressElement && state.timer && state.timer.totalTime > 0) {
        const progress = ((state.timer.totalTime - state.timer.timeLeft) / state.timer.totalTime) * 100;
        progressElement.style.width = `${progress}%`;
    }
}

// Stub functions for audio and notifications
function playAlarmSound() {
    console.log("Playing alarm sound");
}

function showNotification(message) {
    console.log("Notification:", message);
    alert(message);
}

// Scientific calculations for dab timing (1mm thickness)
function calculateHeatTime(material, heater, concentrate) {
    const baseTimes = {
        quartz: { 
            shatter: 20, wax: 22, resin: 25, rosin: 23, 
            budder: 21, diamonds: 26, sauce: 24, crumble: 22
        },
        titanium: { 
            shatter: 15, wax: 17, resin: 20, rosin: 18,
            budder: 16, diamonds: 21, sauce: 19, crumble: 17
        },
        ceramic: { 
            shatter: 30, wax: 32, resin: 35, rosin: 33,
            budder: 31, diamonds: 36, sauce: 34, crumble: 32
        }
    };
    
    const heaterModifiers = {
        torch: 1.0,
        lighter: 1.8,    // Less efficient
        enail: 0.7,      // More efficient
        ebanger: 0.8     // More efficient
    };
    
    const baseTime = baseTimes[material]?.[concentrate] || 20;
    const modifier = heaterModifiers[heater] || 1.0;
    
    return Math.round(baseTime * modifier);
}

function calculateCoolTime(material, heatTime) {
    const coolMultipliers = {
        quartz: 1.3,     // Quartz cools faster
        titanium: 2.0,   // Titanium holds heat longer
        ceramic: 1.5     // Ceramic holds heat moderately
    };
    
    const multiplier = coolMultipliers[material] || 1.5;
    return Math.round(heatTime * multiplier);
}

// Universal timer functionality
function setupTimerButtons() {
    // Home screen start button
    const homeStartBtn = document.getElementById('start-timer-btn');
    if (homeStartBtn) {
        homeStartBtn.addEventListener('click', function() {
            switchToTab('timer-screen');
            initializeTimer();
        });
    }
    
    // Timer screen start button
    const timerStartBtn = document.getElementById('start-timer');
    if (timerStartBtn) {
        timerStartBtn.addEventListener('click', function() {
            if (!state.timer || state.timer.timeLeft === 0) {
                initializeTimer();
            }
            toggleTimer();
        });
    }
    
    // Timer screen reset button
    const resetBtn = document.getElementById('reset-timer');
    if (resetBtn) {
        resetBtn.addEventListener('click', resetTimer);
    }
}

// Update initializeApp to use the universal setup
function initializeApp() {
    console.log("Initializing app...");
    updateClock();
    setupTabNavigation();
    setupOptionButtons();
    setupTimerButtons(); // Use universal timer setup
    updateSettingsDisplay(); // Initialize formula display
    console.log("App initialized");
}
